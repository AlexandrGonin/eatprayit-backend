import express from 'express';
import cors from 'cors';
import { db } from './database';
import { User, TelegramUser } from './types';

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  console.log('Body:', req.body);
  next();
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/users', (req, res) => {
  const users = db.getAllUsers();
  res.json({ users });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
app.post('/auth/telegram', (req, res) => {
  try {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    const telegramUser: TelegramUser = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!telegramUser.id || !telegramUser.first_name) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', telegramUser);
      return res.status(400).json({ 
        error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram',
        received: telegramUser 
      });
    }

    console.log('‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser.id, telegramUser.first_name);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = db.findUserById(telegramUser.id);
    
    const userData: User = {
      ...telegramUser,
      bio: existingUser?.bio || '–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
      updated_at: new Date()
    };

    const savedUser = db.saveUser(userData);
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedUser.id, savedUser.first_name);

    res.json({ 
      success: true,
      user: savedUser 
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ /auth/telegram:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile/:userId', (req, res) => {
  try {
    const userId = Number(req.params.userId);
    
    if (!userId || isNaN(userId)) {
      return res.status(400).json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    console.log('üë§ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const user = db.findUserById(userId);

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:', user.first_name);

    res.json({ 
      success: true,
      user 
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ /profile/:userId:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.patch('/profile/:userId', (req, res) => {
  try {
    const userId = Number(req.params.userId);
    const updates = req.body;

    if (!userId || isNaN(userId)) {
      return res.status(400).json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    console.log('‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', userId, updates);

    const existingUser = db.findUserById(userId);

    if (!existingUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedUpdates = ['bio'];
    const filteredUpdates: Partial<User> = {};

    allowedUpdates.forEach(field => {
      if (updates[field] !== undefined) {
        (filteredUpdates as any)[field] = updates[field];
      }
    });

    const updatedUser: User = {
      ...existingUser,
      ...filteredUpdates,
      updated_at: new Date()
    };

    const savedUser = db.saveUser(updatedUser);
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', savedUser.first_name);

    res.json({ 
      success: true,
      user: savedUser 
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ /profile/:userId PATCH:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤
app.use('*', (req, res) => {
  console.log('‚ùå –ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–æ—É—Ç—É:', req.method, req.originalUrl);
  res.status(404).json({ 
    error: '–†–æ—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl 
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error: any, req: any, res: any, next: any) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    details: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ –ë—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/health`);
  console.log(`üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: http://localhost:${PORT}/users`);
});